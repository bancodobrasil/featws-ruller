basePath: /api/v1
definitions:
  v1.Eval:
    additionalProperties: true
    type: object
host: localhost:8000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: |-
    O projeto Ruler é uma implementação do motor de regras [grule-rule-engine](https://github.com/hyperjumptech/grule-rule-engine), que é utilizado para avaliar regras no formato .grl . O Ruler permite que as regras definidas em arquivos .grl sejam avaliadas de maneira automática e eficiente, ajudando a automatizar as decisões tomadas pelo FeatWS. Isso possibilita que o sistema possa analisar e classificar grandes quantidades de informações de maneira rápida e precisa.

    Ao utilizar as regras fornecidas pelo projeto Ruler, o FeatWS é capaz de realizar análises de regras em larga escala e fornecer resultados precisos e relevantes para seus usuários. Isso é especialmente importante em áreas como análise de sentimentos em mídias sociais, detecção de fraudes financeiras e análise de dados em geral.

    Antes de realizar os testes no Swagger, é necessário autorizar o acesso clicando no botão **Authorize**, ao lado, e inserindo a senha correspondente. Após inserir o campo **value** e clicar no botão **Authorize**, o Swagger estará disponível para ser utilizado.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: FeatWS Ruler
  version: "1.0"
paths:
  /eval:
    post:
      consumes:
      - application/json
      description: |-
        Ao receber os parâmetros para executar as folhas de regras. A seguir é explicado com mais detalhes sobre os endpoints:

        - **/Eval**: Esse endpoint é utilizado apenas para aplicações que possuem uma única folha de regra padrão.
        - **/Eval/{knowledgeBase}**: Nesse endpoint é necessário colocar o parametro do nome da folha de regra
        - **/Eval/{knowledgeBase}/{version}**: Nesse endpoint é necessário colocar o parametro do nome da folha de regra como também o número da versão da folha de regra que você deseja escrever a regra.

        **Parameters / Parâmetros**
        No **knowledgeBase**, você pode especificar o nome da folha de regras que deseja utilizar. Já o **version** você coloca a versão que você deseja avaliar. Em **Paramenter**,você pode especificar o que deseja testar em sua folha de regras. A seguir, serão apresentados alguns exemplos de testes:

        [Exemplo 1](https://github.com/bancodobrasil/featws-transpiler/tree/develop/__tests__/cases/0001%20-%20one_parameter) **Testando uma variável**:
        Nesse exemplo, é possível testar a feature *myboolfeat*. Ao abrir o arquivo [rules.featws](https://github.com/bancodobrasil/featws-transpiler/blob/develop/__tests__/cases/0001%20-%20one_parameter/rules.featws), é possível observar que, se o valor de *mynumber* for menor que 12, a feature *myboolfeat* retornará *true*. Caso contrário, se for maior ou igual a 12, o retorno será *false*. Portanto, para testar essa regra, basta inserir o seguinte corpo de *Parameters*.
        ```
        {
        "mynumber": "1"
        }
        ```

        [Exemplo 2](https://github.com/bancodobrasil/featws-transpiler/tree/develop/__tests__/cases/0003%20-%20simple_group) **Regra com um grupo**:
        Nesse exemplo vamos testar a utilização de um grupo espeífico. Ao enviarmos um **clientingroup** que tenha no grupo [mygroup](https://github.com/bancodobrasil/featws-transpiler/blob/develop/__tests__/cases/0003%20-%20simple_group/groups/mygroup.json), espera-se como retorno **mygroup** = true, caso seja passado uma agencia e conta válidas como a seguir:
        ```
        {
        "branch": "00000",
        "account": "00000000"
        }
        ```

        [Exemplo 3](https://github.com/bancodobrasil/featws-transpiler/tree/develop/__tests__/cases/0004%20-%20default_value_true) **Regra com um valor padrão**:
        Nesse exemplo vamos testar a utilização de um valor padrão. Ao enviarmos um **gender** F sua resposta esperada será "female" = "true", e "male" ="false", pois no [rules.featws](https://github.com/bancodobrasil/featws-transpiler/blob/develop/__tests__/cases/0004%20-%20default_value_true/rules.featws) da regra diz que female é o inverso de male. Logo caso seja enviado o valor de "gender": "M", teremos female ="false" e male ="true". Sendo enviado qualque outra letra como parâmetro será recebido female="false" e male="true", pois o default male está declarado primeiro do que o female no arquivo [features.json](https://github.com/bancodobrasil/featws-transpiler/blob/develop/__tests__/cases/0004%20-%20default_value_true/features.json) da regra.
        ```
        {
        "gender": "F"
        }
        ```

        [Exemplo 4](https://github.com/bancodobrasil/featws-transpiler/tree/develop/__tests__/cases/0005%20-%20precedence_order) **Regra com ordem de procedência**:
        Nesse exemplo vamos testar a utilização de uma ordem de procedência. Similar ao caso anterior, se é enviado um valor menor ou igual à 18, receberemos como resposta "menor_de_idade": "true" e "maior_de_idade": "false", caso seja enviado um valor maior que 18 deveremos receber "menor_de_idade": "false" e "maior_de_idade": "true". Caso não seja enviado nenhum valor de idade, será interpretado como "menor_de_idade": "true" e "maior_de_idade":"false".
        ```
        {
        "idade": "21"
        }
        ```

        [Exemplo 5](https://github.com/bancodobrasil/featws-transpiler/tree/develop/__tests__/cases/0008%20-%20group%20_intersection) **Regra com interseção de grupos**:
        A interseção de grupos ocorre quando dois ou mais grupos têm elementos em comum, ou seja, há um conjunto de elementos que pertencem a todos os grupos em questão. Nesse caso só haverá interseção quando tivermos passado:
        ```
        {
        "name": "jose",
        "age": "30",
        "salary": "5001"
        }
        ```
        Caso seja colocado um valor maior que 5000 em *salary*, também será uma interseção. Temos como resultados esperados o valor de "mygroup": "true", "taget_client": "true" e   "high_income": "true".

        [Exemplo 6](https://github.com/bancodobrasil/featws-transpiler/blob/develop/__tests__/cases/0012%20-%20increment_value/rules.featws) **Regra com incrementação de valor**:
        Nesse exemplo será somado um valor na variável. Com isso teremos como resposta de travel_1: travel_distance + 10, ou seja 10, e como resposta de travel_2: travel_distance + 10, ou seja, 110.
        ```
        {
        "travel_distance": "0"
        }
        ```


        Exemplo 7 **Regra com incrementação de valor**:
        - [Adição](https://github.com/bancodobrasil/featws-transpiler/blob/develop/__tests__/cases/0017%20-%20target_group_string_and_integer/rules.featws): Nesse exemplo será somado um valor na variável. Com isso teremos como resposta de travel_1: travel_distance + 10, ou seja 10, e como resposta de travel_2: travel_distance + 10, ou seja, 110.
        ```
        {
        "travel_distance": "0"
        }
        ```
        - Valor [Quadratico](https://github.com/bancodobrasil/featws-transpiler/tree/develop/__tests__/cases/0025%20-%20age%20_squared) e [Cubico](https://github.com/bancodobrasil/featws-transpiler/tree/develop/__tests__/cases/0026%20-%20age%20_cubed): Ao enviar um valor escolhido será retornado o valor cubico e quadrático do valor, podendo ser pedido um ou outro ao depender da regra escrita.
        ```
        {
        "idade": "5"
        }
        ```

        [Exemplo 8](https://github.com/bancodobrasil/featws-transpiler/tree/develop/__tests__/cases/0034%20-%20simple_feature_with_condition) **Regra com Condição**:

        ```
        {
        "mynumber": "-5",
        myothernumber": "12"
        }
        ```
      parameters:
      - description: knowledgeBase
        in: path
        name: knowledgeBase
        type: string
      - description: version
        in: path
        name: version
        type: string
      - description: Parameters
        in: body
        name: parameters
        required: true
        schema:
          $ref: '#/definitions/v1.Eval'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
        default:
          description: ""
          schema:
            type: string
      security:
      - Authentication Api Key: []
      summary: Evaluate the rulesheet / Avaliação da folha de Regra
      tags:
      - eval
  /eval/{knowledgeBase}:
    post:
      consumes:
      - application/json
      description: |-
        Ao receber os parâmetros para executar as folhas de regras. A seguir é explicado com mais detalhes sobre os endpoints:

        - **/Eval**: Esse endpoint é utilizado apenas para aplicações que possuem uma única folha de regra padrão.
        - **/Eval/{knowledgeBase}**: Nesse endpoint é necessário colocar o parametro do nome da folha de regra
        - **/Eval/{knowledgeBase}/{version}**: Nesse endpoint é necessário colocar o parametro do nome da folha de regra como também o número da versão da folha de regra que você deseja escrever a regra.

        **Parameters / Parâmetros**
        No **knowledgeBase**, você pode especificar o nome da folha de regras que deseja utilizar. Já o **version** você coloca a versão que você deseja avaliar. Em **Paramenter**,você pode especificar o que deseja testar em sua folha de regras. A seguir, serão apresentados alguns exemplos de testes:

        [Exemplo 1](https://github.com/bancodobrasil/featws-transpiler/tree/develop/__tests__/cases/0001%20-%20one_parameter) **Testando uma variável**:
        Nesse exemplo, é possível testar a feature *myboolfeat*. Ao abrir o arquivo [rules.featws](https://github.com/bancodobrasil/featws-transpiler/blob/develop/__tests__/cases/0001%20-%20one_parameter/rules.featws), é possível observar que, se o valor de *mynumber* for menor que 12, a feature *myboolfeat* retornará *true*. Caso contrário, se for maior ou igual a 12, o retorno será *false*. Portanto, para testar essa regra, basta inserir o seguinte corpo de *Parameters*.
        ```
        {
        "mynumber": "1"
        }
        ```

        [Exemplo 2](https://github.com/bancodobrasil/featws-transpiler/tree/develop/__tests__/cases/0003%20-%20simple_group) **Regra com um grupo**:
        Nesse exemplo vamos testar a utilização de um grupo espeífico. Ao enviarmos um **clientingroup** que tenha no grupo [mygroup](https://github.com/bancodobrasil/featws-transpiler/blob/develop/__tests__/cases/0003%20-%20simple_group/groups/mygroup.json), espera-se como retorno **mygroup** = true, caso seja passado uma agencia e conta válidas como a seguir:
        ```
        {
        "branch": "00000",
        "account": "00000000"
        }
        ```

        [Exemplo 3](https://github.com/bancodobrasil/featws-transpiler/tree/develop/__tests__/cases/0004%20-%20default_value_true) **Regra com um valor padrão**:
        Nesse exemplo vamos testar a utilização de um valor padrão. Ao enviarmos um **gender** F sua resposta esperada será "female" = "true", e "male" ="false", pois no [rules.featws](https://github.com/bancodobrasil/featws-transpiler/blob/develop/__tests__/cases/0004%20-%20default_value_true/rules.featws) da regra diz que female é o inverso de male. Logo caso seja enviado o valor de "gender": "M", teremos female ="false" e male ="true". Sendo enviado qualque outra letra como parâmetro será recebido female="false" e male="true", pois o default male está declarado primeiro do que o female no arquivo [features.json](https://github.com/bancodobrasil/featws-transpiler/blob/develop/__tests__/cases/0004%20-%20default_value_true/features.json) da regra.
        ```
        {
        "gender": "F"
        }
        ```

        [Exemplo 4](https://github.com/bancodobrasil/featws-transpiler/tree/develop/__tests__/cases/0005%20-%20precedence_order) **Regra com ordem de procedência**:
        Nesse exemplo vamos testar a utilização de uma ordem de procedência. Similar ao caso anterior, se é enviado um valor menor ou igual à 18, receberemos como resposta "menor_de_idade": "true" e "maior_de_idade": "false", caso seja enviado um valor maior que 18 deveremos receber "menor_de_idade": "false" e "maior_de_idade": "true". Caso não seja enviado nenhum valor de idade, será interpretado como "menor_de_idade": "true" e "maior_de_idade":"false".
        ```
        {
        "idade": "21"
        }
        ```

        [Exemplo 5](https://github.com/bancodobrasil/featws-transpiler/tree/develop/__tests__/cases/0008%20-%20group%20_intersection) **Regra com interseção de grupos**:
        A interseção de grupos ocorre quando dois ou mais grupos têm elementos em comum, ou seja, há um conjunto de elementos que pertencem a todos os grupos em questão. Nesse caso só haverá interseção quando tivermos passado:
        ```
        {
        "name": "jose",
        "age": "30",
        "salary": "5001"
        }
        ```
        Caso seja colocado um valor maior que 5000 em *salary*, também será uma interseção. Temos como resultados esperados o valor de "mygroup": "true", "taget_client": "true" e   "high_income": "true".

        [Exemplo 6](https://github.com/bancodobrasil/featws-transpiler/blob/develop/__tests__/cases/0012%20-%20increment_value/rules.featws) **Regra com incrementação de valor**:
        Nesse exemplo será somado um valor na variável. Com isso teremos como resposta de travel_1: travel_distance + 10, ou seja 10, e como resposta de travel_2: travel_distance + 10, ou seja, 110.
        ```
        {
        "travel_distance": "0"
        }
        ```


        Exemplo 7 **Regra com incrementação de valor**:
        - [Adição](https://github.com/bancodobrasil/featws-transpiler/blob/develop/__tests__/cases/0017%20-%20target_group_string_and_integer/rules.featws): Nesse exemplo será somado um valor na variável. Com isso teremos como resposta de travel_1: travel_distance + 10, ou seja 10, e como resposta de travel_2: travel_distance + 10, ou seja, 110.
        ```
        {
        "travel_distance": "0"
        }
        ```
        - Valor [Quadratico](https://github.com/bancodobrasil/featws-transpiler/tree/develop/__tests__/cases/0025%20-%20age%20_squared) e [Cubico](https://github.com/bancodobrasil/featws-transpiler/tree/develop/__tests__/cases/0026%20-%20age%20_cubed): Ao enviar um valor escolhido será retornado o valor cubico e quadrático do valor, podendo ser pedido um ou outro ao depender da regra escrita.
        ```
        {
        "idade": "5"
        }
        ```

        [Exemplo 8](https://github.com/bancodobrasil/featws-transpiler/tree/develop/__tests__/cases/0034%20-%20simple_feature_with_condition) **Regra com Condição**:

        ```
        {
        "mynumber": "-5",
        myothernumber": "12"
        }
        ```
      parameters:
      - description: knowledgeBase
        in: path
        name: knowledgeBase
        type: string
      - description: version
        in: path
        name: version
        type: string
      - description: Parameters
        in: body
        name: parameters
        required: true
        schema:
          $ref: '#/definitions/v1.Eval'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
        default:
          description: ""
          schema:
            type: string
      security:
      - Authentication Api Key: []
      summary: Evaluate the rulesheet / Avaliação da folha de Regra
      tags:
      - eval
  /eval/{knowledgeBase}/{version}:
    post:
      consumes:
      - application/json
      description: |-
        Ao receber os parâmetros para executar as folhas de regras. A seguir é explicado com mais detalhes sobre os endpoints:

        - **/Eval**: Esse endpoint é utilizado apenas para aplicações que possuem uma única folha de regra padrão.
        - **/Eval/{knowledgeBase}**: Nesse endpoint é necessário colocar o parametro do nome da folha de regra
        - **/Eval/{knowledgeBase}/{version}**: Nesse endpoint é necessário colocar o parametro do nome da folha de regra como também o número da versão da folha de regra que você deseja escrever a regra.

        **Parameters / Parâmetros**
        No **knowledgeBase**, você pode especificar o nome da folha de regras que deseja utilizar. Já o **version** você coloca a versão que você deseja avaliar. Em **Paramenter**,você pode especificar o que deseja testar em sua folha de regras. A seguir, serão apresentados alguns exemplos de testes:

        [Exemplo 1](https://github.com/bancodobrasil/featws-transpiler/tree/develop/__tests__/cases/0001%20-%20one_parameter) **Testando uma variável**:
        Nesse exemplo, é possível testar a feature *myboolfeat*. Ao abrir o arquivo [rules.featws](https://github.com/bancodobrasil/featws-transpiler/blob/develop/__tests__/cases/0001%20-%20one_parameter/rules.featws), é possível observar que, se o valor de *mynumber* for menor que 12, a feature *myboolfeat* retornará *true*. Caso contrário, se for maior ou igual a 12, o retorno será *false*. Portanto, para testar essa regra, basta inserir o seguinte corpo de *Parameters*.
        ```
        {
        "mynumber": "1"
        }
        ```

        [Exemplo 2](https://github.com/bancodobrasil/featws-transpiler/tree/develop/__tests__/cases/0003%20-%20simple_group) **Regra com um grupo**:
        Nesse exemplo vamos testar a utilização de um grupo espeífico. Ao enviarmos um **clientingroup** que tenha no grupo [mygroup](https://github.com/bancodobrasil/featws-transpiler/blob/develop/__tests__/cases/0003%20-%20simple_group/groups/mygroup.json), espera-se como retorno **mygroup** = true, caso seja passado uma agencia e conta válidas como a seguir:
        ```
        {
        "branch": "00000",
        "account": "00000000"
        }
        ```

        [Exemplo 3](https://github.com/bancodobrasil/featws-transpiler/tree/develop/__tests__/cases/0004%20-%20default_value_true) **Regra com um valor padrão**:
        Nesse exemplo vamos testar a utilização de um valor padrão. Ao enviarmos um **gender** F sua resposta esperada será "female" = "true", e "male" ="false", pois no [rules.featws](https://github.com/bancodobrasil/featws-transpiler/blob/develop/__tests__/cases/0004%20-%20default_value_true/rules.featws) da regra diz que female é o inverso de male. Logo caso seja enviado o valor de "gender": "M", teremos female ="false" e male ="true". Sendo enviado qualque outra letra como parâmetro será recebido female="false" e male="true", pois o default male está declarado primeiro do que o female no arquivo [features.json](https://github.com/bancodobrasil/featws-transpiler/blob/develop/__tests__/cases/0004%20-%20default_value_true/features.json) da regra.
        ```
        {
        "gender": "F"
        }
        ```

        [Exemplo 4](https://github.com/bancodobrasil/featws-transpiler/tree/develop/__tests__/cases/0005%20-%20precedence_order) **Regra com ordem de procedência**:
        Nesse exemplo vamos testar a utilização de uma ordem de procedência. Similar ao caso anterior, se é enviado um valor menor ou igual à 18, receberemos como resposta "menor_de_idade": "true" e "maior_de_idade": "false", caso seja enviado um valor maior que 18 deveremos receber "menor_de_idade": "false" e "maior_de_idade": "true". Caso não seja enviado nenhum valor de idade, será interpretado como "menor_de_idade": "true" e "maior_de_idade":"false".
        ```
        {
        "idade": "21"
        }
        ```

        [Exemplo 5](https://github.com/bancodobrasil/featws-transpiler/tree/develop/__tests__/cases/0008%20-%20group%20_intersection) **Regra com interseção de grupos**:
        A interseção de grupos ocorre quando dois ou mais grupos têm elementos em comum, ou seja, há um conjunto de elementos que pertencem a todos os grupos em questão. Nesse caso só haverá interseção quando tivermos passado:
        ```
        {
        "name": "jose",
        "age": "30",
        "salary": "5001"
        }
        ```
        Caso seja colocado um valor maior que 5000 em *salary*, também será uma interseção. Temos como resultados esperados o valor de "mygroup": "true", "taget_client": "true" e   "high_income": "true".

        [Exemplo 6](https://github.com/bancodobrasil/featws-transpiler/blob/develop/__tests__/cases/0012%20-%20increment_value/rules.featws) **Regra com incrementação de valor**:
        Nesse exemplo será somado um valor na variável. Com isso teremos como resposta de travel_1: travel_distance + 10, ou seja 10, e como resposta de travel_2: travel_distance + 10, ou seja, 110.
        ```
        {
        "travel_distance": "0"
        }
        ```


        Exemplo 7 **Regra com incrementação de valor**:
        - [Adição](https://github.com/bancodobrasil/featws-transpiler/blob/develop/__tests__/cases/0017%20-%20target_group_string_and_integer/rules.featws): Nesse exemplo será somado um valor na variável. Com isso teremos como resposta de travel_1: travel_distance + 10, ou seja 10, e como resposta de travel_2: travel_distance + 10, ou seja, 110.
        ```
        {
        "travel_distance": "0"
        }
        ```
        - Valor [Quadratico](https://github.com/bancodobrasil/featws-transpiler/tree/develop/__tests__/cases/0025%20-%20age%20_squared) e [Cubico](https://github.com/bancodobrasil/featws-transpiler/tree/develop/__tests__/cases/0026%20-%20age%20_cubed): Ao enviar um valor escolhido será retornado o valor cubico e quadrático do valor, podendo ser pedido um ou outro ao depender da regra escrita.
        ```
        {
        "idade": "5"
        }
        ```

        [Exemplo 8](https://github.com/bancodobrasil/featws-transpiler/tree/develop/__tests__/cases/0034%20-%20simple_feature_with_condition) **Regra com Condição**:

        ```
        {
        "mynumber": "-5",
        myothernumber": "12"
        }
        ```
      parameters:
      - description: knowledgeBase
        in: path
        name: knowledgeBase
        type: string
      - description: version
        in: path
        name: version
        type: string
      - description: Parameters
        in: body
        name: parameters
        required: true
        schema:
          $ref: '#/definitions/v1.Eval'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
        default:
          description: ""
          schema:
            type: string
      security:
      - Authentication Api Key: []
      summary: Evaluate the rulesheet / Avaliação da folha de Regra
      tags:
      - eval
securityDefinitions:
  Authentication Api Key:
    in: header
    name: X-API-Key
    type: apiKey
swagger: "2.0"
x-extension-openapi:
  example: value on a json format
